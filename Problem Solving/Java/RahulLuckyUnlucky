/*
Rahul is a geek. Head is the lucky call for him. You have to make him lucky. You are provided N coins. If the coin is heads facing upwards it means he is lucky else unlucky, your task is to do an operation to make him lucky. Operation allowed is as follows :
Starting from first element, if you find any coin heads facing downwards (Tail), flip the coin at ith index and (i+1)th index.  

 

Example 1:

Input:
5
H T H T H
Output:
2
2 3
Explanation:
Coins at index 2 and 3 needs to
be flipped to make Rahul happy.

Example 1:
Input:
3
H H H
Output:
0
Explanation:
No index to be flipped.
 
 

Your Task:  
You don't need to read input or print anything. Your task is to complete the function flippedIndexes() which takes the char array A[], its size N and a getAnswer[]  array as inputs and returns the count of the number of indexes to be flipped and stores the indexes in the getAnswer[] array.
Note:- If count is zero, you don't need to store anything in the getAnswer[] array.


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

 

Constraints:
1 ≤ N ≤ 107
A[i] = {'H', 'T'}
*/

//{ Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main(String[] args) throws IOException
	{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim()); // Inputting the testcases
        while(t-->0)
        {
            long n = Long.parseLong(br.readLine().trim());
            char a[] = new char[(int)(n)];
            long getAnswer[] = new long[(int)(n)];
            
            String inputLine[] = br.readLine().trim().split(" ");
            for (int i = 0; i < n; i++) {
                a[i] = inputLine[i].charAt(0);
            }
            
            
            Solution obj = new Solution();
            long count = obj.flippedIndexes(a, n, getAnswer);
            System.out.println(count);
            
            if(count==0)
                System.out.println(-1);
            else
            {
                StringBuilder output = new StringBuilder();
                for(int i=0;i<count;i++)
                    output.append(getAnswer[i]+" ");
                System.out.println(output);
            }
            
        }
	}
}


// } Driver Code Ends


//User function Template for Java


class Solution {
    
    public int flippedIndexes(char a[], long n, long getAnswer[])
    {
        // Your code goes here
        int res=0;
        
        for(int i=0; i<a.length; i++){
            if(a[i]=='T'){
                //updating 1th based indexes for the one which needs to be flipped
                getAnswer[res++]=i+1;
                if(i!=n-1)
                    a[i+1]=a[i+1]=='H' ? 'T' : 'H';
            }
        }
        return res;
    }
}

