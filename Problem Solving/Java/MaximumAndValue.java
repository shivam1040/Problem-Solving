/*
Given an array arr[] of N positive elements. The task is to find the Maximum AND Value generated by any pair of elements from the array.
Note: AND is bitwise '&' operator.

Example 1:

Input : Arr[] = {4, 8, 12, 16}
Output : 8
Explanation:
Pair (8,12) has the Maximum AND Value
i.e. 8.

Example 2:

Input : Arr[] = {4, 8, 16, 2} 
Output : 0

Your Task:
The input is already taken care of by the driver code. You only need to complete the function maxAND() that takes an array (arr), size of Array (n) as parameter and return the maximum AND value of pair. The driver code takes care of the printing.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:
1 <= N <= 5*105
1 <= arr[i] <= 5*105
*/

//{ Driver Code Starts
/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class GFG {
    
	public static void main (String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases
		while(t-->0){
		    int n = Integer.parseInt(br.readLine());
		    String inputLine[] = br.readLine().trim().split(" ");
		    int arr[] = new int[n];
		    for(int i=0; i<n; i++){
		        arr[i]=Integer.parseInt(inputLine[i]);
		    }
		    Solution obj = new Solution();
		    
		    System.out.println(obj.maxAND(arr, n));
		}
	}
}

// } Driver Code Ends


// https://www.youtube.com/watch?v=s5wC7RrxDzE

class Solution{
    
    // Function for finding maximum and value pair
    public static int maxAND (int arr[], int n) {
        // Complete the function
        int res=0;
        
        for(int i=31; i>=0; i--){
            if(count(res | 1 << i, arr) >= 2)
                res|=(1<<i);
        }
        
        return res;
        
    }
    
    private static int count(int pattern, int arr[]){
        int count = 0;
            
        for(int i:arr)
            if((pattern & i) == pattern)
                count++;
        
        return count;
    }
}

